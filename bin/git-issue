#!/bin/bash

# Load vital library that is most important and
# constructed with many minimal functions
# For more information, see etc/README.md
. "$DOTPATH"/etc/lib/vital.sh

if ! is_git_repo; then
    echo "Not a git repository (or any of the parent directories)" 1>&2
    exit 1
fi

if ! has "curl"; then
    echo "curl: not found" 1>&2
    exit 1
fi

if ! has "jq"; then
    echo "jq: not found" 1>&2
    exit 1
fi

REPO="$(
git config --get remote.origin.url \
    | grep github.com \
    | sed -e 's/^.*github\.com[:\/]\(.*\)/\1/;s/\.git$//' \
    | tr -d "\n"
)"

client() {
    local method="$1"
    local url="https://api.github.com/$2"

    local cat_or_echo='cat'
    [ "$method" = 'GET' ] && cat_or_echo='echo'

    $cat_or_echo | curl "$url" 2>/dev/null \
        -sS \
        -X "$method" \
        -H 'Accept: application/vnd.github.v3+json' \
        -H "Authorization: token $GITHUB_ACCESS_TOKEN" \
        -d @-
}

# get the needed info
if [ -z "$1" ]; then
    client_uri="repos/$REPO/issues"
    jq_query='.[] | {(.number | "#" + tostring): {"title": .title, "comments": .comments, "opener": .user.login}}'
else
    if [[ ! $1 =~ ^[0-9]+$ ]]; then
        echo "$1: not integer" 1>&2
        exit 1
    fi
    client_uri="repos/$REPO/issues/$1"
    jq_query='{(.number | "#" + tostring): {"title": .title, "state": .state, "comments": .comments, "opener": .user.login}}'
fi

# http request
log_info "Listing open issues on $REPO"
e_arrow "$REPO"
issues=$(client GET "$client_uri" 2>/dev/null)
if [ -z "$issues" ]; then
    log_fail "empty" 1>&2
    exit 1
fi

# jq and view
echo "$issues" \
    | jq "$jq_query" \
    | awk '$0 !~ /^{$|^}$/' \
    | perl -pe 's/"(#[0-9]+)"/\033[35m$1\033[m/' \
    | perl -pe 's/"(.*?)"/\033[33m$1\033[m/' \
    | perl -pe 's/"(open|closed)"/"\033[31m$1\033[m"/'
